//REFERENCES - 

// 1) Holtz, Y. (2022). Building legends in d3.js. [online] D3-graph-gallery.com. 
//     Available at: https://www.d3-graph-gallery.com/graph/custom_legend.html

// 2) GeeksforGeeks. (2019). D3.js | d3.mean() function - GeeksforGeeks. [online] 
//    Available at: https://www.geeksforgeeks.org/d3-js-d3-mean-function/

// 3) Ocks.org. (2018). getBBox. [online] 
//    Available at: https://bl.ocks.org/mbostock/1160929

// 4) GeeksforGeeks. (2019). How to get a key in a JavaScript object by its value ? - GeeksforGeeks. [online] 
//    Available at: https://www.geeksforgeeks.org/how-to-get-a-key-in-a-javascript-object-by-its-value/



//Setting the dimensions
var widthPIE = 460;
var heightPIE = 300;

//Initializing an empty array to store the data extracted from the csv file
var pieArr = [];

//The below function is used for converting each of the csv column data to their original type
//The column containing string data, are left as it is, whereas the numeric values are converted to 'Number' type
//The function returns a dictionary array, containing key-value pairs from the csv file
function toOriginalTypePIE(d){
    return {
        state: d.state,
        year: Number(d.year),
        
        population: Number(d.population),

        property_rates_all: Number(d.property_rates_all),
        rates_burglary: Number(d.rates_burglary),
        rates_larceny: Number(d.rates_larceny),
        rates_motor: Number(d.rates_motor),

        violent_rates_all: Number(d.violent_rates_all),
        rates_assault: Number(d.rates_assault),
        rates_murder: Number(d.rates_murder),
        rates_rape: Number(d.rates_rape),
        rates_robbery: Number(d.rates_robbery),

        property_total_all: Number(d.property_total_all),
        total_burglary: Number(d.total_burglary),
        total_larceny: Number(d.total_larceny),
        total_motor: Number(d.total_motor),

        violent_total_all: Number(d.violent_total_all),
        total_assault: Number(d.total_assault),
        total_murder: Number(d.total_murder),
        total_rape: Number(d.total_rape),
        total_robbery: Number(d.total_robbery)
    };
}

//Loading the csv file 
d3.csv("data/crimeUS.csv", function(d, i){

    //Using the function to convert each data value into their respective data type
    //The result is pushed to an empty array
    pieArr.push(toOriginalTypePIE(d))
}).then(function(pieData){

    //Initializing the SVG object with a width and height of 360 and 290 respectively
    var svgPIE = d3.select("body")
                    .append("svg")
                    .attr("class","donut")
                    .attr("width", widthPIE - 90)
                    .attr("height", heightPIE - 110)
                    .attr("transform", "translate(20, 10)")
                    .append("g")
                    .attr("transform", "translate(" + (widthPIE-240) + "," + (heightPIE-180) + ")")


    //Initializing the radius of the arcs
    //These are generated by taking the minimum of the width and height (360 and 290 respectively) defined above
    //After computing the result, the average is taken
    var radius = Math.min(widthPIE, heightPIE)/2;

    //Defining a custom ordinal scale of colors
    //Each of the 7 colors represents a crime subcategory
    var color = d3.scaleOrdinal()
                    .range(["#05E0E9", "#FF2768", "#9E8EDE", "#FFFF00", "#0081AC", "#FFA0A3", "#FF0000"]);

    //Creating a group container for the donut chart
    var grPIE = svgPIE.append("g")


    //Generating the pie
    //This also help to calculate the start and end angle accordingly for each of the arcs to be generated
    var pie = d3.pie()
                .sort(null)

    //Generating the arcs
    //Since a donut chart is to be displayed, the innerRadius() is not set as 0
    var arc = d3.arc()
                .innerRadius(radius - 100)
                .outerRadius(radius - 50); 
    
    
    //Global function
    //Within this function, the donut chart will be generated
    window.changePIE = function(yearPIE){
        
        //Since the donut chart is generated as per the current year
        //the code extracts all the records collected for that particular year
        var newPieArr = pieArr.filter(filteringDataPIE)
            
        function filteringDataPIE(d){
            //If the current year that is being read is the year chosen on the slider
            //then extract the relative records for that year
            if(d.year == +yearPIE){
                return d
            }
        }

        //Function used for getting the key for a given value present in an object array
        function getCrimeName(dat, val) {
            //For loop to iterate over the given object array
            for(var i = 0; i<dat.length; i++){
                //For loop to iterate over the properties (keys) of the object
                for (var key in dat[i]) {
                    //Check if the given property is the direct property of the object
                    //and not an inherited one
                    if (dat[i].hasOwnProperty(key) == true) {       //(GeeksforGeeks, 2019)
                        //Check if the potential key has a value equal to the one provided to the 
                        //function
                        if (dat[i][key] === val){
                            //Return the key
                            return key
                        }
                    }
                }
            }
        }

        //Defining empty arrays to store the total crime subcategory value recorded for each 
        //state
        var totBurglary = []
        var totLarceny = []
        var totMotor = []
        var totAssault = []
        var totMurder = []
        var totRape = []
        var totRobbery = []

        //Push the total crime subcategory value recorded for each 
        //state into the empty arrays defined above
        for(var i = 0; i<newPieArr.length; i++){
            totBurglary.push(newPieArr[i].total_burglary)
            totLarceny.push(newPieArr[i].total_larceny)
            totMotor.push(newPieArr[i].total_motor)
            totAssault.push(newPieArr[i].total_assault)
            totMurder.push(newPieArr[i].total_murder)
            totRape.push(newPieArr[i].total_rape)
            totRobbery.push(newPieArr[i].total_robbery)
        }


        //To show the proportion of the avaerage value for each subcategory
        //the mean is required to be computed
        //Using the mean() function to compute the average value of each array
        var mean_totBurglary = d3.mean(totBurglary)          //(GeeksforGeeks, 2019)
        var mean_totLarceny = d3.mean(totLarceny)
        var mean_totMotor = d3.mean(totMotor)
        var mean_totAssault = d3.mean(totAssault)
        var mean_totMurder = d3.mean(totMurder)
        var mean_totRape = d3.mean(totRape)
        var mean_totRobbery = d3.mean(totRobbery)


        //Creating an object array in which the crime name serves as the key
        //and the average value (computed above) is its value
        var objArrPIE = [
            {Burglary: mean_totBurglary},
            {Larceny: mean_totLarceny},
            {Motor: mean_totMotor},
            {Assault: mean_totAssault},
            {Murder: mean_totMurder},
            {Rape: mean_totRape},
            {Robbery: mean_totRobbery}
        ]

        //Creating an array containing just the average values of each subcategory
        var crime_arrPIE = [
            mean_totBurglary, 
            mean_totLarceny, 
            mean_totMotor, 
            mean_totAssault, 
            mean_totMurder, 
            mean_totRape, 
            mean_totRobbery
        ]

        //Storing the name of each subcategory in array
        //This will help in creating the legend of the donut chart
        var legendArrPIE = ["Burglary", "Larceny", "Motor", "Assault", "Murder", "Rape", "Robbery"]

        //Creating the legend for the donut chart
        var legend_PIE = grPIE.selectAll(".legendPIEDots")
                                .data(legendArrPIE)

             //Adding the markers of the legend
             legend_PIE.enter()
                            .append("circle")
                            .merge(legend_PIE)
                            .attr("class", "legendPIEDots")      //The elements will come under this class
                            .attr("cx", 150)
                            .attr("cy", function(d,i){        //Adding a space of 18 between each of the legend markers so that they don't look crampped up
                                return (-12) + i*18              //(Holtz, 2022)
                            }) 
                            .attr("r", 7)
                            .style("fill", function(d, i){
                                return color(d)        //The colors are set according to the ordinal color scale defined above
                            })
         
         //Adding the labels of the legend
         grPIE.selectAll("legendPIELabels")
                            .data(legendArrPIE)
                            .enter()
                            .append("text")
                            .attr("font-size", "13px")
                            .attr("x", 160)
                            .attr("y", function(d,i){           //Adding a space of 18 between each of the legend labels so that they don't look crampped up
                                return (-12) + i*18            //(Holtz, 2022)
                            }) 
                            .attr("fill", "white")
                            .text(function(d){ 
                                return d                 //The 7 crime subcategories present in the legendArrPIE array is the text that appears as the labels
                            })
                            .attr("text-anchor", "left")
                            .style("alignment-baseline", "middle")    //(Holtz, 2022)
        

        //Generating the groups
        //Using the values present in the crime_arrPIE, the start and end angles of each of the arcs will also be calculated using the pie object (created above)
        var path = grPIE.selectAll("path")
                        .data(pie(crime_arrPIE))
        
        //Drawing arc paths
        path.enter()
            .append("path")
            .merge(path)
            .on("mouseover", onMouseOverPIE)        //Listening for mouseover events
            .on("mouseout", onMouseOutPIE)          //Listening for mouseout events
            .transition()
            .duration(1000)
            .attr("fill", function(d, i){
                return color(i);   //Using the ordinal scale of colors defined above, each of the wedges have been colored accordingly
            })
            .attr("d", arc)
            .attrTween("d", function(d){

                //The interpolate function uses the start and end angle of the arcs to 
                //spin each of the pie chart segments
                var i = d3.interpolate(d.endAngle, d.startAngle);
                            return function (t){
                                d.startAngle = i(t);
                                return arc(d);
                            }
            })
        
        //Creating an svg rectangle that appears behind the text
        var tooltipRectPIE = grPIE.append("rect")
                                .style("position", "absolute")
                                .style("visibility", "hidden")     //The visibility is set to "hidden"
                                .attr("fill", "#695E93")     
        

        //Creating an svg text, that provides info on which wedge represents which subcategory
        var tooltipPIE = grPIE.append("text")
                                .attr("class", "pieText")
                                .style("position", "absolute")
                                .style("visibility", "hidden")   //The visibility is set to "hidden"       
                                .attr("fill", "#EFDCF9")         
                                .attr("font-size", "15px") 

        var ttRectPIE;
        
        //This function is triggered when the mouse hovers over any wedge
        function onMouseOverPIE(event, d, i){
            d3.select(this)
                .transition()
                .duration(50)
                //The wedge becomes opaque if the mouse hovers over any of the wedges
                .attr("opacity", ".85")

                //Getting the BBox
                //This BBbox is generated as per the width, height, and position of the svg text element
                ttRectPIE = tooltipPIE.node().getBBox()          //(Ocks.org, 2018)

                tooltipRectPIE.style("visibility", "visible")
                                .attr("x", ttRectPIE.x)            //Setting the x coordinate as per the value generated by the BBox
                                .attr("y", ttRectPIE.y)            //Setting the y coordinate as per the value generated by the BBox 
                                .attr("width", ttRectPIE.width)       //Setting the width as per the value generated by the BBox  
                                .attr("height", ttRectPIE.height)        //Setting the height as per the value generated by the BBox

                //The visibility is set as "visible"
                tooltipPIE.style("visibility", "visible")
                            .attr("x", d3.pointer(event)[0])     //Setting the x coordinate as per the position of the mouse cursor
                            .attr("y", d3.pointer(event)[1])     //Setting the y coordinate as per the position of the mouse cursor
                            .text(function(){
                                //Pass the object array created above and the wedge value
                                //to the function that gets the respective key for the given wedge value
                                d.crimeName = getCrimeName(objArrPIE, d.value) || "Unknown";    //If no key is acquired, then set it as "Unknown"
                                return d.crimeName
                            })
        }

        //This function is triggered when the mouse cursor moves away from the wedge
        function onMouseOutPIE(event, d, i){
            d3.select(this)
                .transition()
                .duration(50)
                //After the mouse moves away from the wedge, set the opacity back to 1
                .attr("opacity", "1")

                //Set the tooltip's visibility to hidden
                tooltipPIE.style("visibility", "hidden")
                tooltipRectPIE.style("visibility", "hidden")
        }
    }
    
})